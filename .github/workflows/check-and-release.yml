name: Check and Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:

env:
  REGISTRY: ghcr.io

permissions:
  contents: write
  packages: write

jobs:
  check:
    timeout-minutes: 2
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: .

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Lint commit messages
        env:
          FROM_REF: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
          TO_REF: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.event.after }}
        run: git log --format=%s ${{ env.FROM_REF }}..${{ env.TO_REF }} | xargs -I {} ./tools/lint-commit.sh {}

  build-backend:
    timeout-minutes: 15
    env:
      IMAGE_NAME: learn-track/learntrack-backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21.0.2'
          distribution: 'temurin'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v3

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          dependency-graph: generate-and-submit

      - name: Build backend
        run: ./gradlew build

      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Run Sonar scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
        run: ./gradlew build sonar --info

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          tags: |
            type=sha,
            type=ref,event=tag

      - name: Docker Login
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-frontend:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: learn-track/learntrack-frontend
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version-file: './frontend/.nvmrc'

      - name: Install yarn dependencies
        run: yarn install

      - name: Lint check frontend
        run: yarn lint:check

      - name: Format check frontend
        run: yarn format:check

      - name: Build frontend
        run: yarn build

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: ./frontend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
          tags: |
            type=sha,
            type=ref,event=tag

      - name: Docker Login
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy_testing:
    if: github.event_name != 'pull_request' && github.ref_type != 'tag'
    needs:
      - build-backend
      - build-frontend
    uses: ./.github/workflows/deploy.yml
    with:
      TARGET: testing
    secrets: inherit

  e2e_testing:
    if: github.event_name != 'pull_request' && github.ref_type != 'tag'
    needs:
      - deploy_testing
    uses: ./.github/workflows/e2e-testing.yml
    secrets: inherit

  deploy_staging:
    if: github.event_name != 'pull_request' && github.ref_type != 'tag'
    needs: e2e_testing
    uses: ./.github/workflows/deploy.yml
    with:
      TARGET: staging
    secrets: inherit
